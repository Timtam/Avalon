<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Samstag, April 14, 2018, 7:36  -->
<!-- MuClient version 5.05 -->

<!-- Plugin "speedwalking" generated by Plugin Wizard -->

<muclient>
<plugin
   name="speedwalking"
   author="Magician"
   id="12e9bfa9a98aa54bd54349a6"
   language="Lua"
   purpose="Ermöglicht das Laufen von Ort zu Ort in Avalon"
   date_written="2018-04-14 07:34:25"
   requires="4.70"
   version="1.0"
   save_state="n"
   >

</plugin>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="*"
   send_to="12"
   sequence="1"
   keep_evaluating="y"
  >
  <send>speedwalk_process(true)</send>
  </trigger>
</triggers>

<aliases>
  <alias
   match="safespeedwalks_switch"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>safespeedwalks_switch()</send>
</alias>
  <alias
   match="speedwalk_break"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>speedwalk_break()</send>
</alias>
  <alias
   match="^/([a-zA-Z0-9]*\.?[a-zA-Z0-9]*)_?([a-zA-Z0-9]*\.?[a-zA-Z0-9]*)$"
   enabled="y"
   send_to="12"
   sequence="100"
   regexp="y"
  >
  <send>speedwalk_start("%1", "%2")</send>
</alias>
  <alias
   match="^/_([a-zA-Z0-9]*\.?[a-zA-Z0-9]*)$"
   enabled="y"
   send_to="12"
   sequence="100"
   regexp="y"
  >
  <send>speedwalk_start("", "%1")</send>
</alias>
  <alias
   match="^//([a-zA-Z0-9.]*)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>speedwalk_list("%1")</send>
</alias>
  <alias
   match="pos"
   enabled="y"
   send_to="12"
   sequence="101"
  >
  <send>print_position()</send>
</alias>
</aliases>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->


<script>
<![CDATA[
require("natsort")
require("speedwalking.speedwalking")
Const = require("speedwalking.constants")
JSON = require("json")
List = require("pl.list")
Path = require("pl.path")
Stations = require("avalon.stations")
String = require("pl.stringx")
Tablex = require("pl.tablex")
Types = require("pl.types")
Way = require("speedwalking.way")
PPI = require("ppi")
Avalon = PPI.Load(world.GetPluginVariable("", "avalon"))
Dunkel = 0
RoomID = nil
SafeSpeedwalks = 1
User_Speedwalks = {}
User_Stations = List.new()
world.DoAfterSpecial(0.5, "PluginInstall()", 12)

function PluginInstall()
  world.Accelerator("ctrl+D", "speedwalk_break")
  world.Accelerator("F5", "safespeedwalks_switch")
  Avalon.HookCallback('DUNKEL', OnAvalonDunkel)
  Avalon.HookCallback('ROOMID', OnAvalonRoomID)
  Avalon.HookCallback('CLOSE', OnAvalonClose)
  SafeSpeedwalks = Avalon.GetConfig('settings', 'SafeSpeedwalks') or 1
  local u_stations, u_speedwalks
  u_stations = Avalon.GetConfig("speedwalking", "stations")
  if not Types.is_empty(u_stations) then
    User_Stations = JSON.decode(world.Base64Decode(u_stations))
    User_Stations = List.new(User_Stations)
  end
  u_speedwalks = Avalon.GetConfig("speedwalking", "speedwalks")
  if not Types.is_empty(u_speedwalks) then
    User_Speedwalks = JSON.decode(world.Base64Decode(u_speedwalks))
  end
  speedwalk_load()
end

function speedwalk_add_station(domain, name, id, description)
  domain = domain:lower()
  name = name:lower()
  id = id:lower()
  possible_stations = Stations:find(id)
  local i
  for i = 1, possible_stations:len() do
    if possible_stations[i].name == name and possible_stations[i].domain == domain then
      return
    end
  end
  Stations:add(domain, name, id, description)
end

function speedwalk_add_speedwalk(source, target, path)
  possible_sources = Stations:find(source)
  if possible_sources:len() == 0 then
    return false
  end
  possible_targets = Stations:find(target)
  if possible_targets:len() == 0 then
    return false
  end
  speedwalks = {}
  possible_sources:foreach(function(s)
    possible_targets:foreach(function(t)
      speedwalks[s.domain.."."..s.name.."_"..t.domain.."."..t.name] = path
    end)
  end)
  Stations:parse_speedwalks(speedwalks, true)
  return true
end

function OnPluginInstall()
  PPI.Expose('FindStations', function(identifier)
    return Stations:find(identifier):map(function(s)
      return {domain = s.domain, name = s.name, id = s.id, description = s.description}
    end)
  end)
  PPI.Expose('AddStation', function(domain, name, id, description)
    speedwalk_add_station(domain, name, id, description)
    User_Stations:foreach(function(s)
      if s.id == id and s.name == name and s.domain == domain then
        return
      end
    end)
    User_Stations:append({name = name, domain = domain, id = id, description = description})
    Avalon.SetConfig("speedwalking", "stations", world.Base64Encode(JSON.encode(User_Stations)))
  end)
  PPI.Expose('AddSpeedwalk', function(source, target, path)
    local success = speedwalk_add_speedwalk(source, target, path)
    if success == false then
      return success
    end
    User_Speedwalks[source.."_"..target] = path
    Avalon.SetConfig("speedwalking", "speedwalks", world.Base64Encode(JSON.encode(User_Speedwalks)))
    return true
  end)
  PPI.Expose('DeleteSpeedwalk', function(from, to)
    local from_domain, from_name = string.match(from, Const.STATION_REGEX)
    local to_domain, to_name = string.match(to, Const.STATION_REGEX)
    local i
    local source
    for i = 1, User_Stations:len() do
      if User_Stations[i].domain == from_domain and User_Stations[i].name == from_name then
        source = User_Stations[i]
        break
      end
    end
    if Types.is_empty(source) then
      return false
    end
    local target
    for i = 1, User_Stations:len() do
      if User_Stations[i].domain == to_domain and User_Stations[i].name == to_name then
        target = User_Stations[i]
        break
      end
    end
    if Types.is_empty(target) then
      return false
    end
    local source_stations = Stations:find(source.id)
    local target_stations = Stations:find(target.id)
    source_stations:foreach(function(s)
      target_stations:foreach(function(t)
        local source_way = Way(s, User_Speedwalks[source.id.."_"..target.id], t)
        local target_way = Way(t, User_Speedwalks[target.id.."_"..source.id], s)
        s:delete_way(source_way)
        t:delete_way(target_way)
        Stations:delete(s)
        Stations:delete(t)
      end)
    end)
    User_Stations:remove_value(source)
    User_Stations:remove_value(target)
    User_Speedwalks[source.id.."_"..target.id] = nil
    User_Speedwalks[target.id.."_"..source.id] = nil
    Avalon.SetConfig("speedwalking", "stations", world.Base64Encode(JSON.encode(User_Stations)))
    Avalon.SetConfig("speedwalking", "speedwalks", world.Base64Encode(JSON.encode(User_Speedwalks)))
    return true
  end)
end

function speedwalk_load(silent)
  Stations:parse_speedwalks(require("avalon.speedwalks"), silent)
  User_Stations:foreach(function(s)
    speedwalk_add_station(s.domain, s.name, s.id, s.description)
  end)
  local name, path
  for name, path in pairs(User_Speedwalks) do
    names = utils.split(name, "_")
    speedwalk_add_speedwalk(names[1], names[2], path)
  end
end

function OnAvalonDunkel(dunkel)
  Dunkel = dunkel
end

function OnAvalonRoomID(id, name, x, y)
  if id ~= RoomID then
    stations = Stations:find(id)
    if stations:len() >= 1 then
      if (Path.exists(GetInfo(74).."Stations/"..stations[1].name..".ogg")) then
        stationsnd = GetInfo(74).."Stations/"..stations[1].name..".ogg"
      else
        stationsnd = GetInfo(74).."Stations/Misc.ogg"
      end
      Avalon.PSND(stationsnd)
    end
  end
  RoomID = id
end

function OnAvalonClose()
  Avalon.SetConfig('settings', 'SafeSpeedwalks', SafeSpeedwalks)
end

function OnPluginTick()
  speedwalk_process()
end

-- falls von hier aus speedwalks starten, werden diese ausgegeben
function print_position()
  if (SafeSpeedwalks == 1) then
    if Dunkel == 1 then
      world.Note("Ohne Licht sind keine weiteren Informationen verfuegbar.")
    else
      stations = Stations:find(RoomID)
      if stations:len() == 0 then
        world.Note("Fuer diesen Ort existiert kein Speedwalk.")
      else
        world.Note("Dieser Ort ist als "..stations:map(function(s) return String.title(s.domain).."."..String.title(s.name) end):join(" und ").." an das Speedwalk-System angebunden.")
      end
    end
  end
end

function safespeedwalks_switch()
  SafeSpeedwalks = 1 - SafeSpeedwalks
  if (SafeSpeedwalks == 0) then
    world.Note("Die Speedwalks werden nicht mehr abgesichert.")
  else
    world.Note("Die Speedwalks werden nun abgesichert.")
  end
  Avalon.PSND("Misc/ConfigSwitch.ogg")
end

function speedwalk_start(from, to)
  -- die verschiedenen faelle
  -- es wird weder von, noch nach angegeben -> ein paar informationen
  if from == "" and to == "" then
    local msg = "Das Speedwalking in Avalon\n"
    msg = msg.."In Avalon kann man von Ort zu Ort laufen, indem man den Befehl /, gefolgt von\n"
    msg = msg.."den Start- und Zielpositionen angibt.\n"
    msg = msg.."Die Positionen werden dabei in zwei Teile geteilt: die Domaene und den Ort.\n"
    msg = msg.."Die Domaene gibt den uebergeordneten Bereich an, waehrend der Ort sehr\n"
    msg = msg.."spezifisch ist. Moechte man beispielsweise von Alotria aus in die Bank in\n"
    msg = msg.."Minias laufen, so kann man /nereid.alotria_minias.bank verwenden.\n"
    msg = msg.."Hinweis: Die Domaene und der Ort koennen so weit wie moeglich abgekuerzt werden,\n"
    msg = msg.."solange sie eindeutig bleiben. /ne.alo_min.bank funktioniert also auch.\n"
    msg = msg.."Sollte es einen Ort mit einem bestimmten Namen nur ein einziges Mal geben,\n"
    msg = msg.."koennt ihr die Domaene auch entfallen lassen.\n"
    msg = msg.."Eine Information zu jedem bekannten Ort bekommt ihr mittels /domaene.ort\n"
    msg = msg.."Und eine Liste aller Domaenen und Orte erhaltet ihr mittels //.\n"
    msg = msg.."Wenn ihr euch bereits an einem bekannten Ort befindet, reicht es auch, wenn\n"
    msg = msg.."ihr nur die Zielposition angebt. Es reicht dann /_min.bank"
    world.Note(msg)
    return
  end
  -- es wird nur von angegeben -> wir geben ein paar informationen fuer diese location aus
  if not Types.is_empty(from) and Types.is_empty(to) then
    if not from:find(".", 1, true) then
      from = "."..from
    end
    stations = Stations:find(from)
    if stations:len() == 0 then
      world.Note("Es gibt keinen Ort mit diesem Namen.")
    elseif stations:len() > 1 then
      world.Note("Dieser Name trifft auf die folgenden Orte zu:\n"..stations:map(function(s) return String.title(s.domain).."."..String.title(s.name) end):join(", "))
    else
      msg = "Name: "..String.title(stations[1].name).."\n"
      msg = msg.."Domaene: "..String.title(stations[1].domain).."\n"
      msg = msg.."Beschreibung: "..stations[1].description.."\n"
      for _, s in pairs(User_Stations) do
        if s.domain == stations[1].domain and s.name == stations[1].name then
          msg = msg.."Von hier aus verlaufen benutzerdefinierte Speedwalks nach:\n"
          for w, _ in pairs(User_Speedwalks) do
            if String.startswith(w, s.id) then
              for _, s2 in pairs(User_Stations) do
                if s2.id == w:sub(string.len(s.id)+2) then
                  msg = msg.."\t"..String.title(s2.domain).."."..String.title(s2.name).."\n"
                end
              end
            end
          end
          break
        end
      end
      msg = msg:sub(1, -2)
      world.Note(msg)
    end
    return
  end
  -- es wird nur to angegeben, wir laufen also von hier los, falls moeglich
  if Types.is_empty(from) then
    if SafeSpeedwalks == 1 and Dunkel == 1 then
      world.Note("Um Speedwalks abzusichern, muss es auf Deinem Feld hell sein. Umschalten kannst Du die Absicherung mit der F5-Taste.")
      return
    end
    stations = Stations:find(RoomID)
  else
    if not from:find(".", 1, true) then
      from = "."..from
    end
    stations = Stations:find(from)
  end
  if stations:len() == 0 then
    world.Note("Dieser Startpunkt ist derzeit nicht bekannt.")
    return
  end
  if stations:len() > 1 and not Types.is_empty(from) then
    world.Note("Dieser Startpunkt trifft auf mehrere Orte zu:\n"..stations:map(function(s) return String.title(s.domain).."."..String.title(s.name) end):join(", "))
    return
  end
  from = stations[1]
  if not to:find(".", 1, true) then
    to = "."..to
  end
  stations = Stations:find(to)
  if stations:len() == 0 then
    world.Note("Dieser Zielpunkt ist derzeit nicht bekannt.")
    return
  end
  if stations:len() > 1 then
    world.Note("Dieser Zielpunkt trifft auf mehrere Orte zu:\n"..stations:map(function(s) return String.title(s.domain).."."..String.title(s.name) end):join(", "))
    return
  end
  to = stations[1]
  if from.id == to.id then
    world.Note("Du bist doch schon hier.")
    return
  end
  speedwalk_init(from, to)
end

function speedwalk_list(filter)
  local custom = false
  local msg = ""
  stations = Stations:find(filter)
  msg = msg..tostring(stations:len()).." Orte gefunden:\n"
  -- die Liste aller Domaenen mit orten bauen
  domains = {}
  stations:foreach(function(s)
    if domains[s.domain] == nil then
      domains[s.domain] = List.new()
    end
    domains[s.domain]:append(s.name)
  end)
  for k,v in Tablex.sort(domains) do
    msg = msg..String.title(k)..":\n"
    for _, v2 in ipairs(natsort(v)) do
      msg = msg.."\t"..String.title(v2)
      for _, s in pairs(User_Stations) do
        if s.domain == k and s.name == v2 then
          msg = msg .. " (*)"
          custom = true
          break
        end
      end
      msg = msg.."\n"
    end
  end
  if custom == true then
    msg = msg.."(*) = Mit benutzerdefiniertem Speedwalk verbunden\n"
  end
  msg = msg:sub(1, -2)
  world.Note(msg)
end
]]>
</script>


</muclient>
