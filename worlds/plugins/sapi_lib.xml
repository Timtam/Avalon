<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, July 11, 2007, 12:32 AM -->
<!-- MuClient version 4.01 -->

<!-- Plugin "tts_sapi" generated by Plugin Wizard -->

<muclient>
<plugin
   name="sapi_lib"
   author="Oriol Gomez"
   id="26bfd9f6a958279a20badf5e"
   language="VBscript"
   purpose="Enables some SAPI lib functions."
   date_written="2007-07-11 00:23:45"
   requires="4.01"
   version="1.0"
  save_state="y"
   >
<description trim="y">
<![CDATA[
This Plugin lets you use SAPI5 as your primary text-to-speech system within MUSHclient.
It uses a command, tts, to set various options.

"TTs" by itself toggles whether or not text from the connected world is automatically read.
The "rate" command lets you adjust the speaking rate of the voice.
"tts rate": tells you the current rate.
"tts rate 10": sets the rate to 10.  The range is -10 (slowest) to 10 (fastest).
the "volume" command lets you adjust the volume of the voice.
"tts volume": tells you the current volume.
"tts volume 100": sets the volume to 100%.  The range is 0 (silent) to 100 (loudest).
The "voice" command lets you adjust the voice that is speaking, from the installed voices on your system.
"tts voice": tells you what voice is currently speaking.
"tts voice microsoft": sets the voice to the first microsoft voice on your system.  Note that the names of the voices to use are specific to your computer and are available to view in the control panel.  You need not provide the full name of the voice, "sam" will match "Microsoft Sam".
The "key" command lets you adjust the keyboard shortcut to stop speech.
"tts key": tells you the currently set key (esc is default)
"Tts key pause": sets the key to the pause key on your keyboard.  To find out the name of a specific key or key combination to use here, use the "key name" dialog box under the input menu.
the "help" command reads this information.

The options you choose for rate, volume, voice and key are stored in properties within the plugin and are specific to each world in which you use this plugin.  This means you can have different voices in different worlds.

The plugin has two aliases you can call in your triggers.  sapi_interrupt [text] will stop what it's currently saying and speak the text you provide instead.  sapi_stop will cause the voice to instantly stop.  By default this alias is bound to the escape key, although you can change this through the tts command.

The plugin currently reads inbound text from your connected world, and tab-completion.  It will work even if you are outside of the MUSHclient window.

]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.vbs"/>

<!--  Aliases  -->

<aliases>
  <alias
   match="sapi_stop"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>ttsObject.speak "", 3</send>
  </alias>
  <alias
   script="ttsToggle"
   match="sapi"
   enabled="y"
   sequence="100"
  >
  </alias>
  <alias
   script="ttsToggle"
   match="sapi *"
   enabled="y"
   sequence="100"
  >
  </alias>
  <alias
   match="sapi_interrupt *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>ttsObject.speak "%1",3</send>
  </alias>
  <alias
   match="sapi_note *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>ttsObject.speak "%1",1</send>
  </alias>

</aliases>

<!--  Script  -->


<script>
<![CDATA[
'setup some variables - the tts object, and the toggle for reading.
dim TTSObject
'changevoice function
'sets the ttsObject's voice to anything specified in search (will match on partial names),and returns the name of the new voice.
function ChangeVoice(search)
dim n,v
for  each v in ttsObject.GetVoices
n = v.getDescription
if isempty(search) then 
search = n
end if
if instr(lcase(n),lcase(search)) then
set ttsObject.Voice = v
ChangeVoice = n
exit for
end if
next
end function

'first decide whether or not to read incoming text, with an alias.
sub TTSToggle (name, line, x)
'we need to take several options here.
if len(line) > 4 then
line = split(line)
'need rate, volume, and voice.
if line(1) = "rate" then
if uBound(line) = 1 then
ttsObject.Speak "The rate is set at "& ttsObject.rate&".",3
else
if not IsNumeric(line(2)) then
ttsObject.Speak  "Rate should be set to a value between -10 and 10.",3
else
ttsObject.rate = int(line(2))
ttsObject.Speak "Rate set to "& line(2) &".",3
world.setVariable "tts_rate",line(2)
world.SaveState
end If
end if
exit sub
end if

'volume
if line(1) = "volume" then
if uBound(line) = 1 then
ttsObject.Speak "The volume is set at "& ttsObject.volume &"%.",3
else
if not IsNumeric(line(2)) then
ttsObject.Speak  "volume should be set to a value between 0 and 100, although  0 will probably be silent..",3
else
ttsObject.volume = int(line(2))
ttsObject.Speak "volume set to "& line(2) &"%.",3
world.setVariable "tts_volume",line(2)
world.SaveState
end If
end if
exit sub
end if
'voice
if line(1) = "voice" then


if uBound(line) = 1 then
dim currentvoice
currentvoice = world.GetVariable ("tts_voice")
if isEmpty(currentvoice) then
currentvoice = "unset, so the default is being used."
end if
ttsObject.Speak "The current voice is "& currentvoice ,3
else

if not IsNumeric(line(2)) then

dim newvoice
newvoice = changeVoice(line(2))
if isEmpty(newvoice) then
ttsObject.Speak"no voice matching the name "&line(2)&" could  be found on your system.  Voices can be found in the control panel.",3
else
ttsObject.speak"voice set to "&newvoice ,3
world.setVariable "tts_voice", newvoice
world.SaveState
end if
else
ttsObject.Speak "Use the name (or partial name) of a voice with this command.  Voices can be found in the control panel.",3
end If
end if
exit sub
end if
if line(1) = "help" then
  world.Note world.GetPluginInfo (world.GetPluginID, 3)
exit sub 
end if
exit sub
end If
if TTSReadNew = 1 then
TTSReadNew = 0
TTSObject.Speak "Incoming text will not be read.", 1
else
TTSReadNew = 1
TTSObject.Speak "Incoming text will be read.",1
end if
end sub
'when the plugIn is first installed, initiate the tts.
sub OnPluginInstall
set TTSObject = CreateObject("Sapi.SpVoice")
'and set it up with the variables
If world.GetVariable("tts_rate") <> "" then ttsObject.rate = world.getVariable("tts_rate")
If world.GetVariable("tts_volume") <> "" then ttsObject.rate = world.getVariable("tts_volume")
end sub

]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="tts_sapi:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
Sub OnHelp (sName, sLine, wildcards)
  world.Note world.GetPluginInfo (world.GetPluginID, 3)
End Sub
]]>
</script> 

</muclient>
