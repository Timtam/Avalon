<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, April 09, 2010, 3:17 PM -->
<!-- MuClient version 4.51 -->

<!-- Plugin "channel_history" generated by Plugin Wizard -->

<muclient>
<plugin
   name="channel_history"
   author="Tyler Spivey and Oriol Gomez"
   id="6000a4c6f0e71d31fecf523d"
   language="Lua"
   purpose="Allows reading of messages sorted into categories with hotkeys"
   date_written="2010-04-09 15:14:12"
   requires="4.51"
   version="2.0"
   save_state="n"
   >
<description trim="y">
<![CDATA[
The only alias you should need is history_add. Its syntax is:
history_add category=message

Accelerator keys:
alt+right and alt+left = next and previous category
shift+alt+right and left move category.
alt+delete delete a category.
alt+1 through alt+0 - read message 1 through 10. pressing
one of these keys twice within 0.5 seconds will copy the message to the
clipboard, and 3 times will paste it into the command window.

]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Aliases  -->

<aliases>
  <alias
   script="history_delete"
   match="^history_delete"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>

  <alias
   script="category_move"
   match="^history_move (\w+)"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>

  <alias
   script="history_add"
   match="^history_add (\[?\w+\-?\w*\-?\w*\]?)=(.*)"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="ttstoggle"
   match="config tts"
   enabled="y"
   omit_from_command_history="y"
keep_evaluating="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_get"
   match="^history_get (\d+)$"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   regexp="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_catprev"
   match="history_catprev"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
  <alias
   script="history_catnext"
   match="history_catnext"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
modes = {} -- for keyboard states
messages = {}
current_category = nil -- not set yet
categories = {}
-- set up accelerators
for i = 1, 9 do
Accelerator("alt + " .. i, "history_get " .. i)
end
Accelerator("alt + 0", "history_get 10") -- 10 is a special case
Accelerator("alt + right", "history_catnext")
Accelerator("alt + left", "history_catprev")
Accelerator("shift+alt + right", "history_move right")
Accelerator("shift+alt + left", "history_move left")
Accelerator("alt+delete","history_delete")
function history_delete(n,l,w)
local i
if #categories == 0 then
say("no categories")
return
end
if current_category == nil then
say("No category selected.")
return
end
local tbl = {}
for k, v in ipairs(categories) do
tbl[v] = k
end
idx = tbl[current_category]
name=categories[idx]
--response=utils.msgbox("Are you sure you want to delete the category "..name.."?", --"Confirmation","yesno","?")
--if response=="yes" then
table.remove(categories,idx)
messages[name]=nil
if #categories < idx+1 then -- wrap around
idx = 1
else
idx=idx+1
end
current_category = categories[idx]
if current_category~=nil then
say(current_category)
else
say("no more categories.")
end
--else
--return
--end
end
function category_move(name, line, w)
local i
if #categories == 0 then
say("no categories")
return
end
if current_category == nil then
say("No category selected.")
return
end
local tbl = {}
for k, v in ipairs(categories) do
tbl[v] = k
end
idx = tbl[current_category]
name=categories[idx]
table.remove(categories,idx)
if w[1]=="right" then
if #categories < idx+1 then -- wrap around
idx = 1
else
idx=idx+1
end
table.insert(categories, idx, name)
else
if idx-1 < 1 then -- wrap around
idx = #categories

else
idx=idx-1
end
table.insert(categories,idx,name)
end
say("moved.")
current_category = categories[idx]
end

function OnPluginInstall()
--SetVariable("tts",GetPluginVariable("553a883096da345ce6897740","tts"))
SetVariable("tts","1")
end
function ttstoggle(n,l,w)
SetVariable("tts",GetPluginVariable("553a883096da345ce6897740","tts"))
end
function history_add(name, line, wc)
-- wc[1] is category, wc[2] is text
local cat, msg = wc[1], wc[2]
if messages[cat] == nil then
messages[cat] = {}
-- add the category to the categories table
table.insert(categories, cat)
end
table.insert(messages[cat], msg)
-- if we go over 10 items, remove the oldest one
if #messages[cat] > 10 then
table.remove(messages[cat], 1)
end
end
-- helper function to say stuff
function say(x) 
if(GetVariable("tts")=="1") then
Execute(";tts_interrupt " .. x)
else
Note(x)
end
end
function history_get(name, line, wc)
-- wc[1] should be the item number.
local str = ""
if current_category == nil and #categories == 0 then
say("No categories")
return
elseif current_category == nil and #categories > 0 then
local all=0
for i,result in ipairs(categories) do
if(categories[i]=="all") then
all=i
end--if
end--for
if(all>0) then
str = str .. "switching to all."
current_category = categories[all]
else
str = str .. "switching to " .. categories[1] .. ". Use alt left and right arrows to change."
current_category = categories[1]
end
end
local item = tonumber(wc[1])
if #messages[current_category] < item then
say("no message")
return
end
-- now that all that's out of the way, we can start our real code which should always succeed.
local timeout = 0.5 -- in seconds
if modes[item] == nil then
modes[item] = {os.clock(), 1}
elseif os.clock()-modes[item][1] >= timeout then
modes[item][1] = os.clock()
modes[item][2] = 1
else
modes[item][1] = os.clock()
modes[item][2] = modes[item][2] + 1
end

local real_item = #messages[current_category]+1-item
if modes[item][2] > 3 then
modes[item][2] = 3
end

if modes[item][2] == 1 then
say(str .. " " .. messages[current_category][real_item])
elseif modes[item][2] == 2 then
SetClipboard(messages[current_category][real_item])
say("copied")
elseif modes[item][2] == 3 then
PasteCommand(messages[current_category][real_item])
say("pasted")
end
end

function history_catnext(name, line, wc)
local i
if #categories == 0 then
say("no categories")
return
end
if current_category == nil then
current_category = categories[1]
say(current_category)
return
end

local tbl = {}
for k, v in ipairs(categories) do
tbl[v] = k
end
idx = tbl[current_category]
if #categories < idx+1 then -- wrap around
idx = 1
else
idx = idx + 1
end
current_category = categories[idx]
say(categories[idx])
end

function history_catprev(name, line, wc)
local i
if #categories == 0 then
say("no categories")
return
end
if current_category == nil then
current_category = categories[#categories]
say(current_category)
return
end

local tbl = {}
for k, v in ipairs(categories) do
tbl[v] = k
end
idx = tbl[current_category]
if idx-1 < 1 then -- wrap around
idx = #categories
else
idx = idx - 1
end
current_category = categories[idx]
say(categories[idx])
end

]]>
</script>
</muclient>
